#include <iostream>
using namespace std;

class Node{
public:
	int data;
	Node* next;	
	

	Node(){
		data=0;
		next=NULL;
	} 
	  Node(int data) 
    { 
        this->data = data; 
        this->next = NULL; 
    } 
};

class LinkedList{
	Node* head;
	public:
		LinkedList(){
			//points to the first node in the linked list.
			// throught the head pointer you can access and manipulate the nodes in thbe linked list
			head=NULL;
		}
		void insertNode(int);
		void printList();	
		void insertFirst(int);
		void getFirst();
		void deleteFirst();
		void deleteLast();//can occur in constant time with a doubly linked list
		void getLast();//can be done efficiently by by storing the tail, a pointer to the last node(data structure augmentation)
		void insertLast();//can be done efficiently by by storing the tail, a pointer to the last node(data structure augmentation)
		
	
};

void LinkedList::insertNode(int data){
	Node* newNode= new Node(data);/*new creates a memory address. if we create another instance of class node in the same instace of linked list,
	the memory address generated by that next instance is assigned to the next pointer of the head.*/
	
	if(head == NULL){
		head=newNode;
		return;
	}
	Node* temp =head;// we want to start looping from here
	

	while(temp->next != NULL){//despite temp by itself just being a pointer, we have to explicitly say, temp->next cause if we just do temp we will also be referring to the data attribute of the temp variable 
		temp= temp->next;//The loop's goal is to find the last node in the linked list. The last node is characterized by having its next pointer set to NULL
		
	}
	temp->next=newNode;
	
}
void LinkedList::printList(){
	Node* temp = head;
	if(head==NULL){
		cout<<"List is empty"<<endl;
		return;
	}
	while(temp!=NULL){//if we looped using temp->next,the last number would not be printed out because it has a NULL pointer,using temp refers to the memory address as well as the data attribute and they would both have to be null for printing to stop.
		cout<<temp->data<<" ";
		temp=temp->next;//check out this line next time 
	}
}
void LinkedList::insertFirst(int data){
	Node* newNode=new Node(data);
	if(head==NULL){
		head=newNode;
	}
	else if(head!=NULL){
		Node* firstItem=head;
		newNode->next=firstItem;
        head=newNode;
	}
}
void LinkedList::deleteFirst(){
	if(head==NULL){
		cout<<"the list is empty bitch!";
        return;
	}
	Node* firstItem=head;
	head=firstItem->next;
	delete firstItem;
}
void LinkedList::getFirst(){
	if(head==NULL){
		cout<<"the list is empty";
		return;
	}
	Node* firstNode=head;
	cout<<firstNode->data;
	
}

int main(){
	LinkedList list;
	list.insertNode(1);
	list.insertNode(2);
    list.insertNode(3);
	list.insertNode(4);
	list.insertNode(5);
	list.insertNode(6);
	list.insertNode(7);
	list.insertNode(8);
	list.insertFirst(0);
	list.deleteFirst();
	list.printList();
}